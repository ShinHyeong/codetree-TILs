n = int(input())
grid = [list(input()) for _ in range(n)]
k = int(input())

# Please write your code here.
#처음 부딪히는 칸과 레이저 쏘는 방향
# if n=3, 격자밖 4*3개의 위치
#n=3 k=1 -> (0,0) 남 
#n=3 k=2 -> (0,1) 남 
#n=3 k=3 -> (0,2) 남 
#==> if k<=n, (0,_) : x는 0으로 고정 /y는 0부터 +1  

#n=3 k=4 -> (0,2) 서 
#n=3 k=5 -> (1,2) 서 
#n=3 k=6 -> (2,2) 서 
#==> elif k<=n*2, (_,n-1) : x는 0부터 +1/y는 n-1값으로 고정

#k=7 -> (2,2) 북
#k=8 -> (2,1) 북
#k=9 -> (2,0) 북 
#==> elif k<=n*3, (n-1,_) : x는 n-1로 고정/y는 n-1부터 -1됨

#k=10 -> (2,0) 동
#k=11 -> (1,0) 동
#k=12 -> (0,0) 동 
#==> elif k<=n*4, (_,0) : x는 n-1부터 -1됨/y는 0으로 고정

#(0,0)(0,1)
#(1,0)(1,1)
#북동남서 0123
dxs,dys = [-1,0,1,0],[0,1,0,-1]

#레이저 쏘는 방향과 처음 부딪히는 칸 : (dir_num, (x,y))리턴
def shot(k):
    if k<=n: #[0*n+1,1*n] 남
    #(n,k,y)->(3,1,0),(3,2,1),(3,3,2) 
    #"시작값(0)부터 현재 k까지 몇 번 증가했는가?"
    # k가 구간 시작(0)에서 얼마나 증가했는지 = k-구간시작 = k -(0*n+1) = 가변값-고정값
        return 2, (0, k-(0*n+1))

    elif k<=n*2: #[1*n+1,2*n] 서
    #(n,k,x)->(3,4,0),(3,5,1),(3,6,2) 
    #"시작값(4)부터 현재 k까지 몇 번 증가했는가"
    # k가 구간 시작(4)에서 얼마나 증가했는지 = k-구간시작 = k -(1*n+1) = 가변값-고정값
        return 3, (k-(1*n+1), n-1)

    elif k<=n*3: #[2*n+1,3*n] 북
    #(n,k,y)->(3,7,2),(3,8,1),(3,9,0)
    #"시작값(n-1)에서 몇 번 빼야 하는가?"
    # 몇번 빼야하는가 = k가 구간 시작(7)에서 얼마나 증가했는지 = k-구간시작 = k-(2*n+1)
    # n-1 -(k-(2n+1)) = 고정값-가변값
        return 0, (n-1, n-1-(k-(2*n+1)))

    else: #k<=n*4 #[3*n+1,4*n] 동
    #(n,k,x)->(3,10,2),(3,11,1),(3,12,0) 
        return 1, (n-1-(k-(3*n+1)) ,0)

#북동남서 0123
# / 화살표방향: 북->동 /동->북 /남->서 /서->남 으로 바뀜 : (북,동)(남,서) (1,2)(2,3) 
# \ 화살표방향: 남->동 /동->남 /북->서 /서->북 으로 바뀜 : (동,남)(북,서) (1,2)(0,3)
def rotate(dir_num, mirror):
    if mirror == "/": #XOR 1 연산은 비트 반전으로 0↔1, 2↔3을 효율적으로 처리합니다.
        dir_num = dir_num ^ 1
    elif mirror == "\\":
        dir_num = 3 - dir_num 
    
    return dir_num

#해당 칸이 격자범위내에 있는지 확인
def in_range(x,y):
    return (0<=x and x<n) and (0<=y and y<n)

cnt=0 # 거울에 튕기는 횟수
# 해당 위치에서 레이저를 쏜다
dir_num = shot(k)[0] #해당 방향으로 레이저를 쏜다
x,y = shot(k)[1] #처음 부딪히는 칸 (=시작위치)
while True:
    dir_num = rotate(dir_num, grid[x][y]) #회전하고 레이저방향 업데이트
    cnt+=1#카운팅
    #다음칸으로 가기 전 다음칸이 격자범위에 있는지 확인
    nx,ny = x+dxs[dir_num],y+dys[dir_num]
    if in_range(nx,ny):
        x,y = nx,ny #한칸 이동
    else:
        break #종료

# 거울에 튕기는 횟수 출력
print(cnt)